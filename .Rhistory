count(diabetes) %>%
mutate(prop = n/sum(n))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>% #<<
filter(complete.cases(PimaIndiansDiabetes2))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>%
filter(complete.cases(PimaIndiansDiabetes2)) #<<
knitr::kable(data.frame(ID=1:3,Name=letters[1:3]))
knitr::kable(data.frame(ID=c(1,3),Name=letters[c(1,3)]))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>%
filter(complete.cases(PimaIndiansDiabetes2)) #<<
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneExample.png")
library(tableone)
tableone<-
CreateTableOne(data=PimaIndiansDiabetes2)#<<
print(tableone)
library(tableone)
tableone<-
CreateTableOne(data=PimaIndiansDiabetes2,
strata = "diabetes")#<<
print(tableone)
library(tableone)
tableone<-
CreateTableOne(data=PimaIndiansDiabetes2,
strata = "diabetes")
print(tableone,quote = T)#<<
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneR.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRSelect.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcel.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcelFormat.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcelDel.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcelDelSetting.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneFinal.png")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,  #<<
prop=(3/4),#<<
strata = diabetes)#<<
DM_train<- training(splits)
DM_test<- testing(splits)
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,
prop=(3/4),
strata = diabetes)
DM_train<- training(splits)#<<
DM_test<- testing(splits)#<<
set.seed(123)#<<
splits<- initial_split(PimaIndiansDiabetes2,
prop=(3/4),
strata = diabetes)
DM_train<- training(splits)
DM_test<- testing(splits)
DM_train %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
DM_test %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>% #<<
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe)
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%  #<<
step_zv(all_predictors()) %>% #<<
step_normalize(all_predictors())#<<
summary(gen_recipe)
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe) #<<
lr_mod <-
logistic_reg() %>% #<<
set_engine("glm") #<<
lr_wflow <-
workflow() %>% #<<
add_model(lr_mod) %>% #<<
add_recipe(gen_recipe)#<<
lr_wflow
lr_fit <-
lr_wflow %>%
fit(data=DM_train) #<<
lr_fit <-
lr_wflow %>%
fit(data=DM_train)
knitr::kable(head(lr_fit %>%
pull_workflow_fit() %>%
tidy()), format = 'html')
lr_pred <- lr_fit %>%
predict(DM_test) #<<
knitr::kable(head(lr_pred), format = 'html')
lr_pred <- lr_fit %>%
predict(DM_test) %>%
bind_cols(DM_test %>% select(diabetes)) #<<
knitr::kable(head(lr_pred), format = 'html')
lr_pred %>%
accuracy(truth = diabetes, #<<
.pred_class)#<<
lr_pred <- lr_fit %>%
predict(DM_test,
type = "prob")%>% #<<
bind_cols(DM_test %>% select(diabetes))
knitr::kable(head(lr_pred), format = 'html')
lr_pred %>%
roc_curve(truth = diabetes, #<<
.pred_pos) %>% #<<
autoplot()#<<
knitr::kable(lr_pred %>%
roc_auc(truth = diabetes,
.pred_pos),
format = 'html')
knitr::kable(lr_fit %>%
pull_workflow_fit() %>%
tidy(), format = 'html')
library(parallel)
library(doParallel)
all_cores <- detectCores(logical = FALSE)
cl <- makePSOCKcluster(all_cores)
registerDoParallel(cl)
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),  #<<
trees = 1000) %>% #<<
set_engine("ranger") %>%
set_mode("classification")
rf_mod
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%  #<<
add_recipe(gen_recipe) #<<
rf_wflow
knitr::include_graphics("https://www.tidymodels.org/start/resampling/img/resampling.svg")
knitr::include_graphics("https://www.frontiersin.org/files/Articles/411217/fmicb-09-02393-HTML/image_m/fmicb-09-02393-g002.jpg")
set.seed(345)
folds <- vfold_cv(DM_train, #<<
v = 10, #<<
strata = diabetes) #<<
folds
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,#<<
grid = 50,#<<
metrics = metric_set(roc_auc),#<<
control=control_resamples(save_pred = TRUE)
)
knitr::kable(rf_res %>%
collect_metrics() %>% head(), format = 'html')
rf_res %>%
collect_metrics() %>%
ggplot(aes(min_n, mean, color = mtry)) +
geom_line(size=1)
knitr::kable(rf_res %>%
show_best("roc_auc"), format = 'html')
best_rf <- rf_res %>%
select_best("roc_auc")#<<
knitr::kable(head(best_rf), format = 'html')
final_wflow <-
rf_wflow %>%
finalize_workflow(best_rf)#<<
final_wflow
final_rf_model <-
final_wflow %>%
fit(data = DM_train) #<<
final_rf_model
rf_pred <- final_rf_model %>%
predict(DM_test)#<<
knitr::kable(head(rf_pred), format = 'html')
rf_pred <- final_rf_model %>%
predict(DM_test) %>%
bind_cols(DM_test %>% select(diabetes)) #<<
knitr::kable(head(rf_pred), format = 'html')
knitr::kable(rf_pred %>%
accuracy(truth = diabetes,
.pred_class),
format = 'html')
rf_pred <- final_rf_model %>%
predict(DM_test,
type = "prob")%>% #<<
bind_cols(DM_test %>% select(diabetes))
knitr::kable(head(rf_pred), format = 'html')
rf_pred %>%
roc_curve(truth = diabetes, #<<
.pred_pos) %>% #<<
autoplot()#<<
knitr::kable(rf_pred %>%
roc_auc(truth = diabetes, #<<
.pred_pos), format = 'html')
final_rf_model %>%
pull_workflow_fit()
final_rf_model %>%
pull_workflow_fit() %>% tidy()
final_rf_model %>%
pull_workflow_fit() %>%
vi()
final_rf_model %>%
pull_workflow_fit() %>%
vi(mtry=best_rf$mtry,min_n=best_rf$min_n)
library(vip)
final_rf_model %>%
pull_workflow_fit() %>%
vi()
?vi
final_rf_model %>%
pull_workflow_fit() %>%
vip()
final_rf_model <-
final_wflow %>%
last_fit(data = DM_train) #<<
final_rf_model <-
final_wflow %>%
fit(data = DM_train) #<<
final_rf_model <-
final_wflow %>%
fit(data = DM_train) #<<
final_rf_model
library(vip)
final_rf_model %>%
pull_workflow_fit() %>%
vip()
final_rf_model <-
final_wflow %>%
fit(data = DM_train) #<<
final_rf_model
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%  #<<
add_recipe(gen_recipe) #<<
rf_wflow
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),  #<<
trees = 1000) %>% #<<
set_engine("ranger",
importance= "permutation") %>%
set_mode("classification")
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger",
importance= "permutation") %>%
set_mode("classification")
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%  #<<
add_recipe(gen_recipe) #<<
rf_wflow
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,#<<
grid = 50,#<<
metrics = metric_set(roc_auc),#<<
control=control_resamples(save_pred = TRUE)
)
install.packages("xgboost")
library(kernlab)
library(vip)
final_rf_model %>%
pull_workflow_fit() %>%
vip()
knitr::include_graphics("https://www.teslarati.com/wp-content/uploads/2018/07/model-3-drivetrain-1.jpg")
knitr::include_graphics("https://raw.githubusercontent.com/DHLab-TSENG/emr_slide/master/emr_package-figure/dashboard.jpg")
knitr::include_graphics("https://raw.githubusercontent.com/DHLab-TSENG/emr_slide/master/emr_package-figure/RStudio.png")
knitr::include_graphics("https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/iphone-xr-white-select-201809?wid=940&hei=1112&fmt=png-alpha&qlt=80&.v=1551226036668")
knitr::include_graphics("https://3c.yipee.cc/wp-content/uploads/2019/06/a7ffbaa3df50d7cafe6801a8a8d7a3bf-620x320.jpg")
library(tidymodels)
library(mlbench)
data("PimaIndiansDiabetes2") # 載入資料
glimpse(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>% #<<
filter(complete.cases(PimaIndiansDiabetes2))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>%
filter(complete.cases(PimaIndiansDiabetes2)) #<<
knitr::kable(data.frame(ID=1:3,Name=letters[1:3]))
knitr::kable(data.frame(ID=c(1,3),Name=letters[c(1,3)]))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>%
filter(complete.cases(PimaIndiansDiabetes2)) #<<
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneExample.png")
library(tableone)
tableone<-
CreateTableOne(data=PimaIndiansDiabetes2)#<<
print(tableone)
library(tableone)
tableone<-
CreateTableOne(data=PimaIndiansDiabetes2,
strata = "diabetes")#<<
print(tableone)
library(tableone)
tableone<-
CreateTableOne(data=PimaIndiansDiabetes2,
strata = "diabetes")
print(tableone,quote = T)#<<
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneR.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRSelect.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcel.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcelFormat.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcelDel.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneRExcelDelSetting.png")
knitr::include_graphics("https://raw.githubusercontent.com/yijutseng/RCourses/master/figures/tableoneFinal.png")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,  #<<
prop=(3/4),#<<
strata = diabetes)#<<
DM_train<- training(splits)
DM_test<- testing(splits)
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,
prop=(3/4),
strata = diabetes)
DM_train<- training(splits)#<<
DM_test<- testing(splits)#<<
set.seed(123)#<<
splits<- initial_split(PimaIndiansDiabetes2,
prop=(3/4),
strata = diabetes)
DM_train<- training(splits)
DM_test<- testing(splits)
DM_train %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
DM_test %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>% #<<
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe)
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%  #<<
step_zv(all_predictors()) %>% #<<
step_normalize(all_predictors())#<<
summary(gen_recipe)
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe) #<<
lr_mod <-
logistic_reg() %>% #<<
set_engine("glm") #<<
lr_wflow <-
workflow() %>% #<<
add_model(lr_mod) %>% #<<
add_recipe(gen_recipe)#<<
lr_wflow
lr_fit <-
lr_wflow %>%
fit(data=DM_train) #<<
lr_fit <-
lr_wflow %>%
fit(data=DM_train)
knitr::kable(head(lr_fit %>%
pull_workflow_fit() %>%
tidy()), format = 'html')
lr_pred <- lr_fit %>%
predict(DM_test) #<<
knitr::kable(head(lr_pred), format = 'html')
lr_pred <- lr_fit %>%
predict(DM_test) %>%
bind_cols(DM_test %>% select(diabetes)) #<<
knitr::kable(head(lr_pred), format = 'html')
lr_pred %>%
accuracy(truth = diabetes, #<<
.pred_class)#<<
lr_pred <- lr_fit %>%
predict(DM_test,
type = "prob")%>% #<<
bind_cols(DM_test %>% select(diabetes))
knitr::kable(head(lr_pred), format = 'html')
lr_pred %>%
roc_curve(truth = diabetes, #<<
.pred_pos) %>% #<<
autoplot()#<<
knitr::kable(lr_pred %>%
roc_auc(truth = diabetes,
.pred_pos),
format = 'html')
knitr::kable(lr_fit %>%
pull_workflow_fit() %>%
tidy(), format = 'html')
library(parallel)
library(doParallel)
all_cores <- detectCores(logical = FALSE)
cl <- makePSOCKcluster(all_cores)
registerDoParallel(cl)
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger",
importance= "permutation") %>%
set_mode("classification")
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),  #<<
trees = 1000) %>% #<<
set_engine("ranger",
importance= "permutation") %>%
set_mode("classification")
rf_mod
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%  #<<
add_recipe(gen_recipe) #<<
rf_wflow
knitr::include_graphics("https://www.tidymodels.org/start/resampling/img/resampling.svg")
knitr::include_graphics("https://www.frontiersin.org/files/Articles/411217/fmicb-09-02393-HTML/image_m/fmicb-09-02393-g002.jpg")
set.seed(345)
folds <- vfold_cv(DM_train, #<<
v = 10, #<<
strata = diabetes) #<<
folds
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,#<<
grid = 50,#<<
metrics = metric_set(roc_auc),#<<
control=control_resamples(save_pred = TRUE)
)
knitr::kable(rf_res %>%
collect_metrics() %>% head(), format = 'html')
rf_res %>%
collect_metrics() %>%
ggplot(aes(min_n, mean, color = mtry)) +
geom_line(size=1)
knitr::kable(rf_res %>%
show_best("roc_auc"), format = 'html')
best_rf <- rf_res %>%
select_best("roc_auc")#<<
knitr::kable(head(best_rf), format = 'html')
final_wflow <-
rf_wflow %>%
finalize_workflow(best_rf)#<<
final_wflow
final_rf_model <-
final_wflow %>%
fit(data = DM_train) #<<
final_rf_model
rf_pred <- final_rf_model %>%
predict(DM_test)#<<
knitr::kable(head(rf_pred), format = 'html')
rf_pred <- final_rf_model %>%
predict(DM_test) %>%
bind_cols(DM_test %>% select(diabetes)) #<<
knitr::kable(head(rf_pred), format = 'html')
knitr::kable(rf_pred %>%
accuracy(truth = diabetes,
.pred_class),
format = 'html')
rf_pred <- final_rf_model %>%
predict(DM_test,
type = "prob")%>% #<<
bind_cols(DM_test %>% select(diabetes))
knitr::kable(head(rf_pred), format = 'html')
rf_pred %>%
roc_curve(truth = diabetes, #<<
.pred_pos) %>% #<<
autoplot()#<<
knitr::kable(rf_pred %>%
roc_auc(truth = diabetes, #<<
.pred_pos), format = 'html')
final_rf_model %>%
pull_workflow_fit() %>%
vip()
final_rf_model %>%
pull_workflow_fit()
final<-final_rf_model %>%
pull_workflow_fit()
final$fit$importance.mode
final$fit$splitrule
imp<-
final_rf_model %>%
pull_workflow_fit() %>%
vip()
imp$data
?vip
final_rf_model %>%
pull_workflow_fit() %>%
vi()
install.packages("xgboost")
install.packages(c("mlbench", "vip"))
install.packages("xaringan")
install.packages("dials")
